// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  email            String
  role             UserRole
  favouritePlayers FavouritePlayer[]
  favouriteTeams   FavouriteTeam[]
  imageSlug        String?
}

model FavouriteTeam {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model FavouritePlayer {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  userId   String
  playerId String
}

model Manager {
  id            String            @id @default(cuid())
  firstName     String
  lastName      String
  currentTeam   Team?             @relation(fields: [teamId], references: [id])
  teamId        String?           @unique
  previousClubs PreviousManager[]
}

model PreviousManager {
  id          String    @id @default(cuid())
  manager     Manager   @relation(fields: [managerId], references: [id])
  managerId   String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  tenureStart DateTime
  tenureEnd   DateTime?
}

model PreviousTeam {
  id          String    @id @default(cuid())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  player      Player    @relation(fields: [playerId], references: [id])
  playerId    String
  tenureStart DateTime
  tenureEnd   DateTime?
}

model Player {
  id                 String               @id @default(cuid())
  firstName          String
  lastName           String
  primaryShirtNumber Int
  primaryPosition    Position
  dateOfBirth        DateTime
  nationality        Country              @relation(fields: [countryId], references: [id])
  imageSlug          String?
  countryId          String
  currentTeam        Team?                @relation(fields: [teamId], references: [id])
  teamId             String?
  goals              Goal[]               @relation("goals")
  assists            Goal[]               @relation("assists")
  cardAwarded        CardAwarded[]
  lineup             PlayerInGameLineup[]
  favouritedByUser   FavouritePlayer[]
  previousTeams      PreviousTeam[]
}

model TeamInCompetition {
  id            String      @id @default(cuid())
  team          Team        @relation(fields: [teamId], references: [id])
  compatition   Competition @relation(fields: [competitionId], references: [id])
  teamId        String
  competitionId String
}

model Competition {
  id                      String                    @id @default(cuid())
  name                    String
  country                 Country                   @relation(fields: [countryId], references: [id])
  countryId               String
  games                   Game[]
  highlightedCompetitions HighlightedCompetitions[]
  teams                   TeamInCompetition[]
  imageSlug               String?
}

// TODO: mo≈æda da bude flag na predmetu umjesto vlastite tablice?
model HighlightedCompetitions {
  id            String      @id @default(cuid())
  compatition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
}

model Team {
  id               String              @id @default(cuid())
  name             String
  country          Country             @relation(fields: [countryId], references: [id])
  Player           Player[]
  countryId        String
  homeGames        Game[]              @relation("homeGames")
  awayGames        Game[]              @relation("awayGames")
  highlightedTeams HighlightedTeam[]
  favouritedByUser FavouriteTeam[]
  competitions     TeamInCompetition[]
  imageSlug        String?
  currentManager   Manager?
  previousManagers PreviousManager[]
  previousPlayers  PreviousTeam[]
}

model HighlightedTeam {
  id     String @id @default(cuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model Country {
  id          String        @id @default(cuid())
  code        String        @unique
  name        String        @unique
  Player      Player[]
  team        Team[]
  competition Competition[]
  imageSlug   String?
}

model PlayerInGameLineup {
  id                String    @id @default(cuid())
  player            Player    @relation(fields: [playerId], references: [id])
  playerId          String
  gamePosition      Position?
  shirtNumber       Int?
  subbedInMinute    Decimal
  subbedInHalftime  Halftime
  subbedOutMinute   Decimal?
  subbedOutHalftime Halftime?
  startedGame       Boolean
}

model Game {
  id               String          @id @default(cuid())
  competition      Competition     @relation(fields: [competitionId], references: [id])
  competitionId    String
  homeTeam         Team            @relation("homeGames", fields: [homeTeamId], references: [id])
  homeTeamId       String          @map("homeTeamId")
  awayTeam         Team            @relation("awayGames", fields: [awayTeamId], references: [id])
  awayTeamId       String          @map("awayTeamId")
  statistics       GameStatistics?
  gameStatisticsId String?
  cardsAwarded     CardAwarded[]
  kickoffTime      DateTime
  isOver           Boolean
  goals            GoalInGame[]
}

model GoalInGame {
  id     String @id @default(cuid())
  inGame Game   @relation(fields: [gameId], references: [id])
  goal   Goal   @relation(fields: [goalId], references: [id])
  gameId String
  goalId String
}

model Goal {
  id               String       @id @default(cuid())
  scoredBy         Player       @relation("goals", fields: [scorerId], references: [id])
  scorerId         String
  isOwnGoal        Boolean
  scoredInMinute   Decimal
  scoredInHalftime Halftime
  assistedBy       Player?      @relation("assists", fields: [assistentId], references: [id])
  assistentId      String?
  inGame           GoalInGame[]
}

model GameStatistics {
  id                       String @id @default(cuid())
  homeTeamBallPossession   Float
  game                     Game   @relation(fields: [gameId], references: [id])
  gameId                   String @unique
  homeTeamTotalShots       Int
  homeTeamShotsOnTarget    Int
  homeTeamCornerKicks      Int
  homeTeamOffsides         Int
  homeTeamFouls            Int
  homeTeamBigChances       Int
  homeTeamPasses           Int
  homeTeamCrosses          Int
  homeTeamTackles          Int
  homeTeamDribbles         Int
  homeTeamDriblesSucessful Int

  // Away team repeats
  awayTeamTotalShots       Int
  awayTeamShotsOnTarget    Int
  awayTeamCornerKicks      Int
  awayTeamOffsides         Int
  awayTeamFouls            Int
  awayTeamBigChances       Int
  awayTeampasses           Int
  awayTeamcrosses          Int
  awayTeamtackles          Int
  awayTeamdribbles         Int
  awayTeamdriblesSucessful Int
}

model CardAwarded {
  id       String   @id @default(cuid())
  cardType CardType
  player   Player   @relation(fields: [playerId], references: [id])
  playerId String
  game     Game     @relation(fields: [gameId], references: [id])
  gameId   String
  minute   Decimal
  halftime Halftime
}

enum Halftime {
  FIRST_HALF
  SECOND_HALF
  EXTRA_FIRST_HALF
  EXTRA_SECOND_HALF
}

enum CardType {
  RED
  YELLOW
}

enum Position {
  GOAL_KEEPER
  CENTRE_BACK
  LEFT_BACK
  RIGHT_BACK
  LEFT_WING_BACK
  RIGHT_WING_BACK
  CENTER_DEFNSIVE_MIDFIELDER
  CENTER_MIDFIELDER
  RIGHT_MIDFIELDER
  LEFT_MIDFIELDER
  CENTER_ATTACKING_MIDFIELDER
  RIGHT_WINGER
  LEFT_WINGER
  CENTER_FORWARD
  SUBSTITUTE
}

enum UserRole {
  USER
  ADMIN
}
