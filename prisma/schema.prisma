// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  email            String
  role             UserRole
  favouritePlayers FavouritePlayer[]
  favouriteTeams   FavouriteTeam[]
}

model FavouriteTeam {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model FavouritePlayer {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  userId   String
  playerId String
}

model Manager {
  id                 String                @id @default(cuid())
  imageSlug          String?
  firstName          String
  lastName           String
  teamId             String?               @unique
  nationality        Country               @relation(fields: [countryId], references: [id])
  teamsInSeason      ManagerInTeamSeason[]
  managerForHomeTeam Game[]                @relation("homeTeamManager")
  managerForawayTeam Game[]                @relation("awayTeamManager")
  countryId          String // @default("clfqiqd1i0000uvwm2lh15gov")
}

model ManagerInTeamSeason {
  id        String  @id @default(cuid())
  team      Team    @relation(fields: [teamId], references: [id])
  season    Season  @relation(fields: [seasonId], references: [id])
  manager   Manager @relation(fields: [managerId], references: [id])
  teamId    String
  seasonId  String
  managerId String
}

model PlayersTeamInSeason {
  id       String @id @default(cuid())
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([teamId, playerId, seasonId])
}

model Player {
  id                 String                @id @default(cuid())
  firstName          String
  lastName           String
  primaryShirtNumber Int?
  primaryPosition    Position
  dateOfBirth        DateTime
  nationality        Country               @relation(fields: [countryId], references: [id])
  imageSlug          String?
  countryId          String
  teamId             String?
  goals              Goal[]                @relation("goals")
  assists            Goal[]                @relation("assists")
  cardAwarded        CardAwarded[]
  favouritedByUser   FavouritePlayer[]
  teams              PlayersTeamInSeason[]
  currentTeam        Team?                 @relation(fields: [teamId], references: [id])
  substitutionsIn    Substitution[]        @relation("substitutionsIn")
  substitutionsOut   Substitution[]        @relation("substitutionsOut")
}

model TeamInCompetition {
  id            String      @id @default(cuid())
  team          Team        @relation(fields: [teamId], references: [id])
  compatition   Competition @relation(fields: [competitionId], references: [id])
  season        Season      @relation(fields: [seasonId], references: [id])
  teamId        String
  competitionId String
  seasonId      String
}

model Competition {
  id                  String                @id @default(cuid())
  name                String
  country             Country               @relation(fields: [countryId], references: [id])
  countryId           String
  games               Game[]
  isHighlighted       Boolean
  teams               TeamInCompetition[]
  imageSlug           String?
  type                CompetitionType
  competitionInSeason CompetitionInSeason[]
}

model CompetitionInSeason {
  id            String      @id @default(cuid())
  competition   Competition @relation(fields: [competitionId], references: [id])
  season        Season      @relation(fields: [seasonId], references: [id])
  competitionId String
  seasonId      String
}

model Season {
  id                   String                @id @default(cuid())
  title                String                @unique
  competitionInSeason  CompetitionInSeason[]
  games                Game[]
  teamsInCompetitions  TeamInCompetition[]
  playersTeamInSeason  PlayersTeamInSeason[]
  isCurrent            Boolean
  managersInTeamSeason ManagerInTeamSeason[]
}

model Team {
  id                String                @id @default(cuid())
  name              String
  country           Country               @relation(fields: [countryId], references: [id])
  countryId         String
  homeGames         Game[]                @relation("homeGames")
  awayGames         Game[]                @relation("awayGames")
  highlightedTeams  HighlightedTeam[]
  favouritedByUser  FavouriteTeam[]
  competitions      TeamInCompetition[]
  imageSlug         String?
  previousPlayers   PlayersTeamInSeason[]
  groupId           String?
  primaryShirtColor String
  maganersInSeason  ManagerInTeamSeason[]
  currentPlayers    Player[]
}

model HighlightedTeam {
  id     String @id @default(cuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model Country {
  id           String        @id @default(cuid())
  name         String        @unique
  players      Player[]
  team         Team[]
  competitions Competition[]
  imageSlug    String?
  Manager      Manager[]
}

model Substitution {
  id              String  @id @default(cuid())
  playerIn        Player? @relation("substitutionsIn", fields: [playerInId], references: [id])
  playerOut       Player? @relation("substitutionsOut", fields: [playerOutId], references: [id])
  minute          Int
  extraTimeMinute Int?
  game            Game    @relation(fields: [gameId], references: [id])
  isHomeTeam      Boolean

  playerInId  String
  playerOutId String
  gameId      String
}

model Game {
  id                                String          @id @default(cuid())
  competition                       Competition     @relation(fields: [competitionId], references: [id])
  competitionId                     String
  homeTeam                          Team            @relation("homeGames", fields: [homeTeamId], references: [id])
  homeTeamId                        String          @map("homeTeamId")
  awayTeam                          Team            @relation("awayGames", fields: [awayTeamId], references: [id])
  awayTeamId                        String          @map("awayTeamId")
  statistics                        GameStatistics?
  gameStatisticsId                  String?
  cardsAwarded                      CardAwarded[]
  kickoffTime                       DateTime
  firstHalfEndedAferAdditionalTime  Int
  secondHalfEndedAferAdditionalTime Int
  status                            GameStatus      @default(OVER)
  goals                             Goal[]
  season                            Season?         @relation(fields: [seasonId], references: [id])
  seasonId                          String?
  homeTeamShirtColor                String
  homeTeamGoalkeeperShirtColor      String
  awayTeamShirtColor                String
  awayTeamGoalkeeperShirtColor      String
  homeTeamLineup                    Json
  awayTeamLineup                    Json
  substitutions                     Substitution[]

  homeTeamManager   Manager @relation("homeTeamManager", fields: [homeTeamManagerId], references: [id])
  awayTeamManager   Manager @relation("awayTeamManager", fields: [awayTeamManagerId], references: [id])
  homeTeamManagerId String
  awayTeamManagerId String
}

model Goal {
  id                  String  @id @default(cuid())
  scoredBy            Player  @relation("goals", fields: [scorerId], references: [id])
  scorerId            String
  isOwnGoal           Boolean
  isPenalty           Boolean
  scoredInMinute      Int
  scoredInExtraMinute Int?
  isHomeTeamGoal      Boolean
  assistedBy          Player? @relation("assists", fields: [assistentId], references: [id])
  assistentId         String?
  inGame              Game    @relation(fields: [gameId], references: [id])
  gameId              String
}

model GameStatistics {
  id                       String @id @default(cuid())
  homeTeamBallPossession   Int
  game                     Game   @relation(fields: [gameId], references: [id])
  gameId                   String @unique
  homeTeamTotalShots       Int
  homeTeamShotsOnTarget    Int
  homeTeamCornerKicks      Int
  homeTeamOffsides         Int
  homeTeamFouls            Int
  homeTeamBigChances       Int
  homeTeamPasses           Int
  homeTeamCrosses          Int
  homeTeamTackles          Int
  homeTeamDribles          Int
  homeTeamDriblesSucessful Int

  // Away team repeats
  awayTeamBallPossession   Int
  awayTeamTotalShots       Int
  awayTeamShotsOnTarget    Int
  awayTeamCornerKicks      Int
  awayTeamOffsides         Int
  awayTeamFouls            Int
  awayTeamBigChances       Int
  awayTeamPasses           Int
  awayTeamCrosses          Int
  awayTeamTackles          Int
  awayTeamDribles          Int
  awayTeamDriblesSucessful Int
}

model CardAwarded {
  id              String   @id @default(cuid())
  cardType        CardType
  player          Player   @relation(fields: [playerId], references: [id])
  playerId        String
  game            Game     @relation(fields: [gameId], references: [id])
  gameId          String
  minute          Int
  extraTimeMinute Int?
  isHomeTeam      Boolean
}

enum Halftime {
  FIRST_HALF
  SECOND_HALF
  EXTRA_FIRST_HALF
  EXTRA_SECOND_HALF
}

enum CardType {
  RED
  YELLOW
  SECOND_YELLOW
}

enum Position {
  GOAL_KEEPER
  CENTRE_BACK
  LEFT_BACK
  RIGHT_BACK
  LEFT_WING_BACK
  RIGHT_WING_BACK
  CENTER_DEFNSIVE_MIDFIELDER
  CENTER_MIDFIELDER
  RIGHT_MIDFIELDER
  LEFT_MIDFIELDER
  CENTER_ATTACKING_MIDFIELDER
  RIGHT_WINGER
  LEFT_WINGER
  CENTER_FORWARD
  SUBSTITUTE
}

enum UserRole {
  USER
  ADMIN
}

enum CompetitionType {
  LEAGUE
  GROUP_STAGE_AND_KNOCKOUTS
  TOURNAMENT
}

enum GameStatus {
  NOT_STARTED
  STARTED
  HALFTIME
  OVER
}
