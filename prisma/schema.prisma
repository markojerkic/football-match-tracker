// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  nationality Country       @relation(fields: [countryId], references: [id])
  imageSlug   String?
  countryId   String
  currentTeam Team?         @relation(fields: [clubId], references: [id])
  clubId      String?
  goals       Goal[]        @relation("goals")
  assists     Goal[]        @relation("assists")
  CardAwarded CardAwarded[]
}

model Competition {
  id        String  @id @default(cuid())
  name      String
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  Game      Game[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  country   Country  @relation(fields: [countryId], references: [id])
  Player    Player[]
  countryId String
  homeGames Game[]   @relation("homeGames")
  awayGames Game[]   @relation("awayGames")
}

model Country {
  id          String        @id @default(cuid())
  code        String        @unique
  name        String        @unique
  Player      Player[]
  team        Team[]
  Competition Competition[]
}

model Game {
  id               String         @id @default(cuid())
  competition      Competition    @relation(fields: [competitionId], references: [id])
  competitionId    String
  homeTeam         Team           @relation("homeGames", fields: [homeTeamId], references: [id])
  homeTeamId       String         @map("homeTeamId")
  awayTeam         Team           @relation("awayGames", fields: [awayTeamId], references: [id])
  awayTeamId       String         @map("awayTeamId")
  statistics       GameStatistics @relation(fields: [gameStatisticsId], references: [id])
  gameStatisticsId String         @unique
  cardsAwarded     CardAwarded[]
}

model Goal {
  id               String   @id @default(cuid())
  scoredBy         Player   @relation("goals", fields: [scorerId], references: [id])
  scorerId         String
  isOwnGoal        Boolean
  scoredInMinute   Decimal
  scoredInHalftime Halftime
  assistedBy       Player?  @relation("assists", fields: [assistentId], references: [id])
  assistentId      String?
}

model GameStatistics {
  id                     String @id @default(cuid())
  homeTeamBallPossession Float
  game                   Game?
  homeTeamTotalShots     Int
  homeTeamShotsOnTarget  Int
  homeTeamCornerKicks    Int
  homeOffsides           Int
  homeFouls              Int
}

model CardAwarded {
  id       String   @id @default(cuid())
  cardType CardType
  player   Player   @relation(fields: [playerId], references: [id])
  playerId String
  game     Game?    @relation(fields: [gameId], references: [id])
  gameId   String?
}

enum Halftime {
  FIRST_HALF
  SECOND_HALF
  EXTRA_FIRST_HALF
  EXTRA_SECOND_HALF
}

enum CardType {
  RED
  YELLOW
}
