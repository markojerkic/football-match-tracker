// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  firstName        String
  lastName         String
  email            String
  role             UserRole
  favouritePlayers FavouritePlayer[]
  favouriteTeams   FavouriteTeam[]
  imageSlug        String?
}

model FavouriteTeam {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model FavouritePlayer {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  userId   String
  playerId String
}

model Manager {
  id            String            @id @default(cuid())
  firstName     String
  lastName      String
  currentTeam   Team?             @relation(fields: [teamId], references: [id])
  teamId        String?           @unique
  previousClubs PreviousManager[]
}

model PreviousManager {
  id          String    @id @default(cuid())
  manager     Manager   @relation(fields: [managerId], references: [id])
  managerId   String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  tenureStart DateTime
  tenureEnd   DateTime?
}

model PlayersTeamInSeason {
  id       String @id @default(cuid())
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([teamId, playerId, seasonId])
}

model Player {
  id                 String                @id @default(cuid())
  firstName          String
  lastName           String
  primaryShirtNumber Int?
  primaryPosition    Position
  dateOfBirth        DateTime
  nationality        Country               @relation(fields: [countryId], references: [id])
  imageSlug          String?
  countryId          String
  teamId             String?
  goals              Goal[]                @relation("goals")
  assists            Goal[]                @relation("assists")
  cardAwarded        CardAwarded[]
  lineup             PlayerInGameLineup[]
  favouritedByUser   FavouritePlayer[]
  teams              PlayersTeamInSeason[]
}

model TeamInCompetition {
  id            String      @id @default(cuid())
  team          Team        @relation(fields: [teamId], references: [id])
  compatition   Competition @relation(fields: [competitionId], references: [id])
  season        Season      @relation(fields: [seasonId], references: [id])
  teamId        String
  competitionId String
  seasonId      String
}

model Competition {
  id                  String                @id @default(cuid())
  name                String
  country             Country               @relation(fields: [countryId], references: [id])
  countryId           String
  games               Game[]
  isHighlighted       Boolean
  teams               TeamInCompetition[]
  imageSlug           String?
  type                CompetitionType
  competitionInSeason CompetitionInSeason[]
  groups              Group[]
}

model KnockoutGame {
  id           String  @id @default(cuid())
  game         Game    @relation("knockoutGame", fields: [gameId], references: [id])
  gameId       String  @unique @map("gameId")
  returnGame   Game?   @relation("knockoutReturnGame", fields: [returnGameId], references: [id])
  returnGameId String? @unique @map("returnGameId")
}

model CompetitionInSeason {
  id            String      @id @default(cuid())
  competition   Competition @relation(fields: [competitionId], references: [id])
  season        Season      @relation(fields: [seasonId], references: [id])
  competitionId String
  seasonId      String
}

model Season {
  id                  String                @id @default(cuid())
  title               String                @unique
  competitionInSeason CompetitionInSeason[]
  games               Game[]
  groups              Group[]
  teamsInCompetitions TeamInCompetition[]
  playersTeamInSeason PlayersTeamInSeason[]
  isCurrent           Boolean
}

model Group {
  id            String        @id @default(cuid())
  name          String
  competition   Competition   @relation(fields: [competitionId], references: [id])
  season        Season        @relation(fields: [seasonId], references: [id])
  teams         TeamInGroup[]
  competitionId String
  seasonId      String
}

model TeamInGroup {
  id      String @id @default(cuid())
  group   Group  @relation(fields: [groupId], references: [id])
  team    Team   @relation(fields: [teamId], references: [id])
  groupId String
  teamId  String
}

model Team {
  id                String                @id @default(cuid())
  name              String
  country           Country               @relation(fields: [countryId], references: [id])
  countryId         String
  homeGames         Game[]                @relation("homeGames")
  awayGames         Game[]                @relation("awayGames")
  highlightedTeams  HighlightedTeam[]
  favouritedByUser  FavouriteTeam[]
  competitions      TeamInCompetition[]
  imageSlug         String?
  currentManager    Manager?
  previousManagers  PreviousManager[]
  previousPlayers   PlayersTeamInSeason[]
  groupId           String?
  groups            TeamInGroup[]
  primaryShirtColor String
}

model HighlightedTeam {
  id     String @id @default(cuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
}

model Country {
  id          String        @id @default(cuid())
  name        String        @unique
  players     Player[]
  team        Team[]
  competition Competition[]
  imageSlug   String?
}

model PlayerInGameLineup {
  id                String    @id @default(cuid())
  player            Player    @relation(fields: [playerId], references: [id])
  playerId          String
  game              Game      @relation(fields: [gameId], references: [id])
  lineupRow         Int
  lineupColumn      Int
  shirtNumber       Int?
  subbedInMinute    Int
  subbedInHalftime  Halftime?
  subbedOutMinute   Int?
  subbedOutHalftime Halftime?
  startedGame       Boolean
  gameId            String
}

model Game {
  id                                        String               @id @default(cuid())
  competition                               Competition          @relation(fields: [competitionId], references: [id])
  competitionId                             String
  homeTeam                                  Team                 @relation("homeGames", fields: [homeTeamId], references: [id])
  homeTeamId                                String               @map("homeTeamId")
  awayTeam                                  Team                 @relation("awayGames", fields: [awayTeamId], references: [id])
  awayTeamId                                String               @map("awayTeamId")
  statistics                                GameStatistics?
  gameStatisticsId                          String?
  cardsAwarded                              CardAwarded[]
  kickoffTime                               DateTime
  firstHalfEndedAferAdditionalTime          Int
  secondHalfEndedAferAdditionalTime         Int
  isOver                                    Boolean
  goals                                     Goal[]
  hasExtraTime                              Boolean
  firstExtendedHalfEndedAferAdditionalTime  Int?
  secondExtendedHalfEndedAferAdditionalTime Int?
  hasPenaltyShootout                        Boolean
  knockoutGame                              KnockoutGame?        @relation("knockoutGame")
  knockoutReturnGame                        KnockoutGame?        @relation("knockoutReturnGame")
  season                                    Season?              @relation(fields: [seasonId], references: [id])
  seasonId                                  String?
  homeTeamShirtColor                        String
  homeTeamGoalkeeperShirtColor              String
  awayTeamShirtColor                        String
  awayTeamGoalkeeperShirtColor              String
  players                                   PlayerInGameLineup[]
  homeTeamLineup                            Json
  awayTeamLineup                            Json
}

model Goal {
  id                  String   @id @default(cuid())
  scoredBy            Player   @relation("goals", fields: [scorerId], references: [id])
  scorerId            String
  isOwnGoal           Boolean
  isPenalty           Boolean
  scoredInMinute      Int
  scoredInExtraMinute Int?
  isHomeTeamGoal      Boolean
  // scoredInHalftime    Halftime
  assistedBy          Player?  @relation("assists", fields: [assistentId], references: [id])
  assistentId         String?
  inGame              Game     @relation(fields: [gameId], references: [id])
  gameId              String
}

model GameStatistics {
  id                       String @id @default(cuid())
  homeTeamBallPossession   Int
  game                     Game   @relation(fields: [gameId], references: [id])
  gameId                   String @unique
  homeTeamTotalShots       Int
  homeTeamShotsOnTarget    Int
  homeTeamCornerKicks      Int
  homeTeamOffsides         Int
  homeTeamFouls            Int
  homeTeamBigChances       Int
  homeTeamPasses           Int
  homeTeamCrosses          Int
  homeTeamTackles          Int
  homeTeamDribles          Int
  homeTeamDriblesSucessful Int

  // Away team repeats
  awayTeamBallPossession   Int
  awayTeamTotalShots       Int
  awayTeamShotsOnTarget    Int
  awayTeamCornerKicks      Int
  awayTeamOffsides         Int
  awayTeamFouls            Int
  awayTeamBigChances       Int
  awayTeamPasses           Int
  awayTeamCrosses          Int
  awayTeamTackles          Int
  awayTeamDribles          Int
  awayTeamDriblesSucessful Int
}

model CardAwarded {
  id       String   @id @default(cuid())
  cardType CardType
  player   Player   @relation(fields: [playerId], references: [id])
  playerId String
  game     Game     @relation(fields: [gameId], references: [id])
  gameId   String
  minute   Decimal
  halftime Halftime
}

enum Halftime {
  FIRST_HALF
  SECOND_HALF
  EXTRA_FIRST_HALF
  EXTRA_SECOND_HALF
}

enum CardType {
  RED
  YELLOW
}

enum Position {
  GOAL_KEEPER
  CENTRE_BACK
  LEFT_BACK
  RIGHT_BACK
  LEFT_WING_BACK
  RIGHT_WING_BACK
  CENTER_DEFNSIVE_MIDFIELDER
  CENTER_MIDFIELDER
  RIGHT_MIDFIELDER
  LEFT_MIDFIELDER
  CENTER_ATTACKING_MIDFIELDER
  RIGHT_WINGER
  LEFT_WINGER
  CENTER_FORWARD
  SUBSTITUTE
}

enum UserRole {
  USER
  ADMIN
}

enum CompetitionType {
  LEAGUE
  GROUP_STAGE_AND_KNOCKOUTS
  TOURNAMENT
}
